---
title: "Canada Retail Sale r-shinylive Quarto document"
format:
  html:
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
---

:::callout-important
Please switch `{{shinylive-r}}` to `{shinylive-r}`. We've suppressed this example from running by using `{{}}`.

It is difficult to load data like csv file to shinylive. The only way that works is that load from website and put code chunk into quarto document, so when render the file, it loads the data. 

```{r, loaddata ,results='hide', echo=FALSE, message=FALSE, warning=FALSE}
#| context: setup

library(dplyr)
library(readr)
library(lubridate)

# functions ----

get_mom_stats <- function(df) {

  df %>%
    arrange(ref_date) %>%
    mutate(mom_val = lag(value),
           mom_pct = ((value / lag(value, n = 1)) - 1) * 100,
           mom_chg = (value - lag(value, n = 1)))
}

get_yoy_stats <- function(df) {

  df %>%
    arrange(ref_date) %>%
    mutate(yoy_val = lag(value, n = 12),
           yoy_pct = ((value / lag(value, n = 12)) - 1) * 100,
           yoy_chg = (value - lag(value, n = 12)))
}

## static vector names ----
province_names <- data.frame(
  geo = c("Canada", "Newfoundland and Labrador", "Prince Edward Island", "Nova Scotia", "New Brunswick",
          "Quebec", "Ontario", "Manitoba", "Saskatchewan", "Alberta",  "British Columbia"),
  vector = c("v1446859483", "v1446859543", "v1446859574", "v1446859605", "v1446859636",
             "v1446859667", "v1446859789", "v1446859881", "v1446859942", "v1446859973", "v1446860064"))

sector_names <-   data.frame(
  sector = c("All Retail Trade",
             "Motor vehicle and parts dealers",
             "Furniture, home furnishings stores, electronics and appliances retailers",
             "Building material and garden equipment and supplies dealers",
             "Food and beverage retailers",
             "Health and personal care retailers",
             "Gasoline stations and fuel vendors",
             "Clothing and clothing accessories retailers",
             "Sporting goods, hobby, musical instrument, book retailers and news dealers",
             "General merchandise retailers",
             "Miscellaneous retailers"),
  vector = c("v1446860063", "v1446860065", "v1446860078", "v1446860071", "v1446860072", "v1446860084",
             "v1446860085", "v1446860087", "v1446860091", "v1446860083", "v1446860092"))

## chart theme/functions ----
# source("scripts/chart_theme.R")
# source("scripts/functions.R")




## get cansim data ----
provinces <- cansim::get_cansim_vector_for_latest_periods(vectors = c("v1446859483", "v1446859543", "v1446859574",
                                                                      "v1446859605", "v1446859636", "v1446859667",
                                                                      "v1446859789", "v1446859881", "v1446859942",
                                                                      "v1446859973", "v1446860064"), periods = 61) %>%
  mutate(REF_DATE = lubridate::ymd(REF_DATE, truncated = 2)) %>%
  janitor::clean_names() %>%
  left_join(province_names, by = c("vector")) %>%
  group_by(geo) %>%
  get_mom_stats() %>%
  ungroup() %>%
  select(ref_date, geo, value, mom_pct)
provinces %>% write_csv("data/provinces.csv")
# provinces = read_csv("data/provinces.csv")
sectors <- cansim::get_cansim_vector_for_latest_periods(vectors = c("v1446860063", "v1446860065",
                                                                    "v1446860078", "v1446860071",
                                                                    "v1446860072", "v1446860084",
                                                                    "v1446860085", "v1446860087",
                                                                    "v1446860091", "v1446860083",
                                                                    "v1446860092"),
                                                       periods = 61) %>%
  mutate(REF_DATE = lubridate::ymd(REF_DATE, truncated = 2)) %>%
  janitor::clean_names() %>%
  left_join(sector_names, by = c("vector")) %>%
  group_by(vector) %>%
  get_yoy_stats() %>%
  ungroup() %>%
  select(ref_date, sector, value, yoy_pct)

sectors %>% write_csv("data/sectors.csv")
# sectors = read_csv("data/sectors.csv")

latestDate <- provinces %>% summarise(date = max(ref_date)) %>%
  mutate(date = paste(month(date, label = TRUE, abbr = TRUE), year(date), sep = " ")) %>%
  pull()


```


:::

```{shinylive-r}
#| standalone: true
#| viewerHeight: 1800

library(shiny)
library(ggplot2)
library(dplyr)
library(stringr)
library(lubridate)

# data_url = "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/penguins.csv"
data_url = "https://raw.githubusercontent.com/jonjunduan/r-shinylive-demo/main/data/provinces.csv"
provinces = read.csv(data_url)

mydate <- provinces %>%
  filter(as.Date(ref_date) %in% as.Date(c((max(as.Date(ref_date)) - lubridate::years(1)):max(as.Date(ref_date))))) %>%
  select(ref_date) %>%
  unique() %>%
  arrange(desc(ref_date)) %>%
  pull()


mygeos <- provinces %>%
  select(geo) %>%
  unique() %>%
  pull()

bcstats_chart_theme <-
  theme_bw() +
  theme(
    panel.border = element_rect(colour="white"),
    plot.title = element_text(face="bold"),
    legend.position=c(1,0),
    legend.justification=c(1,0),
    legend.title = element_text(size=12),
    legend.text = element_text(size=11),
    axis.line = element_line(colour="black"),
    axis.title = element_text(size=12),
    axis.text = element_text(size=10)
  )


#Define UI
ui <- fluidPage(
  
  # Application title
  titlePanel("BC Retail and Trade"),
  
  # Sidebar with a slider input for selecting species
  sidebarLayout(
    sidebarPanel(
      
      selectInput(
        inputId = "date",
        label = NULL,
        choices = mydate,
        selectize = FALSE,
        size = 3
      ),
      
      selectInput(
        inputId = "geo",
        label = NULL,
        choices = mygeos,
        selected = "British Columbia"
      )
      
    ),
    
    # Show a plot of the generated distribution
    mainPanel(
      
      plotOutput("provinceBarPlot"),
      tableOutput("provinceBarTable"),
      plotOutput("provinceLinePlot"),
      tableOutput("provinceLineTable")
    )
  )
  
)

server <- function(input, output, session){
  
  get_province_bar_data = reactive({
    prov_bar_chart <- provinces %>%
      filter(ref_date == input$date) %>%
      mutate(order = case_when(geo == "British Columbia" ~ 1,
                               geo == "Canada" ~ 2,
                               TRUE ~ rank(desc(mom_pct)) + 2),
             geo = str_replace_all(geo, " ", "\n")) %>%
      arrange(order) %>%
      mutate(geo = factor(geo, levels = geo))
    
    prov_bar_chart
    
  })
  
  output$provinceBarTable <- renderTable({get_province_bar_data()[1:10,]})
  
  output$provinceBarPlot <- renderPlot({
    
    p <- ggplot(get_province_bar_data(),
                aes(x = geo, y = mom_pct)) +
      geom_bar(stat = "identity") +
      geom_hline(yintercept = 0) +
      geom_vline(xintercept = 2.5) +
      labs(x = NULL,
           y = "% Change",
           title = "By Province") +
      bcstats_chart_theme
    
    print(p)
  })
  
  
  get_province_line_data = reactive({
    
    prov_line_chart <- provinces %>%
      filter(geo == input$geo) %>%
      mutate(value = value/1000000) %>% 
      mutate(ref_date = as.Date(ref_date))
    
    prov_line_chart
    
  })
  
  output$provinceLineTable <- renderTable({get_province_line_data()[1:10,]})
  
  
  
  
  output$provinceLinePlot <- renderPlot({
    
    p <- ggplot(get_province_line_data(),
                aes(x = ref_date, y = value)) +
      geom_line() +
      labs(x = NULL,
           y = "Billions of Dollars",
           title = paste("For",input$geo)) +
      bcstats_chart_theme +
      scale_x_date(
        limits = c(max(as.Date(get_province_line_data()$ref_date)) - years(5),
                              max(as.Date(get_province_line_data()$ref_date)) + months(3)),
                   expand = c(0,0),
                   date_breaks = "6 months",
                   date_labels = "%b\n%Y" )
    
    print(p)
  })
  
  
  
}

shinyApp(ui, server)
```

Full Skeletal Document Source: 

````md
---
title: "Template for r-shinylive Quarto document"
format:
  html:
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
---

```{shinylive-r}
#| standalone: true

library(shiny)
library(ggplot2)
library(dplyr)
library(stringr)
library(lubridate)

# data_url = "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/penguins.csv"
data_url = "https://raw.githubusercontent.com/jonjunduan/r-shinylive-demo/main/data/provinces.csv"
provinces = read.csv(data_url)

mydate <- provinces %>%
  filter(as.Date(ref_date) %in% as.Date(c((max(as.Date(ref_date)) - lubridate::years(1)):max(as.Date(ref_date))))) %>%
  select(ref_date) %>%
  unique() %>%
  arrange(desc(ref_date)) %>%
  pull()


mygeos <- provinces %>%
  select(geo) %>%
  unique() %>%
  pull()

bcstats_chart_theme <-
  theme_bw() +
  theme(
    panel.border = element_rect(colour="white"),
    plot.title = element_text(face="bold"),
    legend.position=c(1,0),
    legend.justification=c(1,0),
    legend.title = element_text(size=12),
    legend.text = element_text(size=11),
    axis.line = element_line(colour="black"),
    axis.title = element_text(size=12),
    axis.text = element_text(size=10)
  )


#Define UI
ui <- fluidPage(
  
  # Application title
  titlePanel("BC Retail and Trade"),
  
  # Sidebar with a slider input for selecting species
  sidebarLayout(
    sidebarPanel(
      
      selectInput(
        inputId = "date",
        label = NULL,
        choices = mydate,
        selectize = FALSE,
        size = 3
      ),
      
      selectInput(
        inputId = "geo",
        label = NULL,
        choices = mygeos,
        selected = "British Columbia"
      )
      
    ),
    
    # Show a plot of the generated distribution
    mainPanel(
      
      plotOutput("provinceBarPlot"),
      tableOutput("provinceBarTable"),
      plotOutput("provinceLinePlot"),
      tableOutput("provinceLineTable")
    )
  )
  
)

server <- function(input, output, session){
  
  get_province_bar_data = reactive({
    prov_bar_chart <- provinces %>%
      filter(ref_date == input$date) %>%
      mutate(order = case_when(geo == "British Columbia" ~ 1,
                               geo == "Canada" ~ 2,
                               TRUE ~ rank(desc(mom_pct)) + 2),
             geo = str_replace_all(geo, " ", "\n")) %>%
      arrange(order) %>%
      mutate(geo = factor(geo, levels = geo))
    
    prov_bar_chart
    
  })
  
  output$provinceBarTable <- renderTable({get_province_bar_data()[1:10,]})
  
  output$provinceBarPlot <- renderPlot({
    
    p <- ggplot(get_province_bar_data(),
                aes(x = geo, y = mom_pct)) +
      geom_bar(stat = "identity") +
      geom_hline(yintercept = 0) +
      geom_vline(xintercept = 2.5) +
      labs(x = NULL,
           y = "% Change",
           title = "By Province") +
      bcstats_chart_theme
    
    print(p)
  })
  
  
  get_province_line_data = reactive({
    
    prov_line_chart <- provinces %>%
      filter(geo == input$geo) %>%
      mutate(value = value/1000000) %>% 
      mutate(ref_date = as.Date(ref_date))
    
    prov_line_chart
    
  })
  
  output$provinceLineTable <- renderTable({get_province_line_data()[1:10,]})
  
  
  
  
  output$provinceLinePlot <- renderPlot({
    
    p <- ggplot(get_province_line_data(),
                aes(x = ref_date, y = value)) +
      geom_line() +
      labs(x = NULL,
           y = "Billions of Dollars",
           title = paste("For",input$geo)) +
      bcstats_chart_theme +
      scale_x_date(
        limits = c(max(as.Date(get_province_line_data()$ref_date)) - years(5),
                              max(as.Date(get_province_line_data()$ref_date)) + months(3)),
                   expand = c(0,0),
                   date_breaks = "6 months",
                   date_labels = "%b\n%Y" )
    
    print(p)
  })
  
  
  
}

shinyApp(ui, server)
```
````